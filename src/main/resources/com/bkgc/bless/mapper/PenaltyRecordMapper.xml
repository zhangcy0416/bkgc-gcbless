<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.bkgc.bless.mapper.PenaltyRecordMapper">
    <resultMap id="BaseResultMap" type="com.bkgc.bless.model.domain.PenaltyRecord">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="user_id" property="userId" jdbcType="VARCHAR"/>
        <result column="type" property="type" jdbcType="INTEGER"/>
        <result column="role_id" property="roleId" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>
    <sql id="Base_Column_List">
    id, user_id, type, role_id, create_time, update_time
    </sql>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
        select
        <include refid="Base_Column_List"/>
        from penalty_record
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="selectByUserId" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from penalty_record
        where user_id = #{userId,jdbcType=VARCHAR}
    </select>
    <select id="selectPage" resultType="com.bkgc.bless.model.vo.PenaltyRecordVo">
        SELECT
        record.user_id as userId,
        member.Name as realName,
        member.NickName as nickName,
        member.Phone,
        record.create_time as createTime,
        record.type,
        member.status
        FROM
        penalty_record record
        LEFT JOIN auth_member member ON record.user_id = member.Id
        WHERE
        record.role_id = #{roleId,jdbcType=INTEGER}
        <if test="realName!=null and realName!=''">
            AND member.Name LIKE CONCAT('%','${realName}','%')
        </if>
        <if test="nickName!=null and nickName!=''">
            AND member.NickName LIKE CONCAT('%','${nickName}','%')
        </if>
        <if test="phone!=null and phone!=''">
            AND member.Phone LIKE CONCAT('%','${phone}','%')
        </if>
        ORDER BY record.create_time desc
    </select>
    <select id="selectSpacePage" resultType="com.bkgc.bless.model.vo.PenaltyRecordVo">
        SELECT
        record.user_id as userId,
        member.real_name as realName,
        member.nickname as nickName,
        member.Phone,
        record.create_time as createTime,
        record.type,
        member.state as status
        FROM
        penalty_record record
        LEFT JOIN auth_space_master member ON record.user_id = member.user_id
        WHERE
        record.role_id = #{roleId,jdbcType=INTEGER}
        <if test="realName!=null and realName!=''">
            AND member.real_name LIKE CONCAT('%','${realName}','%')
        </if>
        <if test="nickName!=null and nickName!=''">
            AND member.nickname LIKE CONCAT('%','${nickName}','%')
        </if>
        <if test="phone!=null and phone!=''">
            AND member.Phone LIKE CONCAT('%','${phone}','%')
        </if>
        ORDER BY record.create_time desc
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from penalty_record
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.bkgc.bless.model.domain.PenaltyRecord">
        insert into penalty_record (id, user_id, type,
        role_id, create_time, update_time
        )
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER},
        #{roleId,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}
        )
    </insert>
    <insert id="insertSelective" parameterType="com.bkgc.bless.model.domain.PenaltyRecord">
        insert into penalty_record
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="type != null">
                type,
            </if>
            <if test="roleId != null">
                role_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                #{type,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                #{roleId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.bkgc.bless.model.domain.PenaltyRecord">
        update penalty_record
        <set>
            <if test="userId != null">
                user_id = #{userId,jdbcType=VARCHAR},
            </if>
            <if test="type != null">
                type = #{type,jdbcType=INTEGER},
            </if>
            <if test="roleId != null">
                role_id = #{roleId,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.bkgc.bless.model.domain.PenaltyRecord">
        update penalty_record
        set user_id = #{userId,jdbcType=VARCHAR},
        type = #{type,jdbcType=INTEGER},
        role_id = #{roleId,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>